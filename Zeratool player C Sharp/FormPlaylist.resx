<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwl4IGQ6CNGjCXghwwl4IcMJeCHDCXghwwl4IcMJeCHDCX
        ghwwl4IcMJeCHDCXghwwl4IcMJeCHDCXghwwl4IcMJeCHDCXghwwl4IcMJeCHDCXghwwl4IcMJeCHDCX
        ghQwl4ICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMZiDITKZhMBLpJLqNZqF7DGYg+wxmIPsMZiD7DGY
        g+wxmIPsMZiD7DGYg+wxmIPsMZiD7DGYg+wxmIPsMZiD7DGYg+wxmIPsMZiD7DGYg+wxmIPsMZiD7DGY
        g+wxmIPsMZiD5DGYg48xmIMIAAAAAAAAAAAAAAAAAAAAADKZhAMymYS7NJqF/1Colv9JpJH/MpmE/zKZ
        hP8ymYT/MpmE/zKZhP8ymYT/MpmE/zKZhP8ymYT/MpmE/zKZhP8ymYT/MpmE/zKZhP8ymYT/MpmE/zKZ
        hP8ymYT/MpmE/zKZhP8ymYT/MpmE/DKZhF0AAAAAAAAAAAAAAAAAAAAAM5qFDzOaheA1m4b/UamY/1Sr
        mv89n4v/M5qF/zOahf8zmoX/M5qF/zOahf8zmoX/M5qF/zOahf8zmoX/M5qF/zOahf8zmoX/M5qF/zOa
        hf8zmoX/M5qF/zOahf8zmoX/M5qF/zOahf8zmoX/M5qFngAAAAAAAAAAAAAAAAAAAAA1nIcQNZyH4Tid
        if9Uq5n/V62b/1KrmP84non/NZyH/zWch/81nIf/NZyH/zWch/81nIf/NZyH/zWch/81nIf/NZyH/zWc
        h/81nIf/NZyH/zWch/81nIf/NZyH/zWch/81nIf/NZyH/zWch/81nIehAAAAAAAAAAAAAAAAAAAAADae
        iRA2nonhOaCL/1Wtm/9Yrp3/WK6d/02plv83non/Np6J/zaeif82non/Np6J/zaeif82non/Np6J/zae
        if82non/Np6J/zaeif82non/Np6J/zaeif82non/Np6J/zaeif82non/Np6J/zaeiaEAAAAAAAAAAAAA
        AAAAAAAAOKCLEDigi+E8oo3/WbCe/2a2pv9csaD/WbCe/0inlP9Fp5P/RqeT/0ank/9Gp5P/RqeT/0an
        k/9Gp5P/RqeT/0ank/9Gp5P/RqeT/0ank/9Gp5P/RqeT/0ank/8/o4//OKCL/zigi/84oIv/OKCLoQAA
        AAAAAAAAAAAAAAAAAAA6oo0QOqKN4T6kkP+g0sj/7fb0/7fd1f9fs6L/v+Da/+j08v/p9fL/6fXy/+n1
        8v/p9fL/6fXy/+n18v/p9fL/6fXy/+n18v/p9fL/6fXy/+n18v/p9fL/6fXy/9jt6P9QrJr/OqKN/zqi
        jf86oo2hAAAAAAAAAAAAAAAAAAAAADykjxA8pI/hQqeS/9bt6P//////5vPx/2u6qv/k8/D/////////
        /////////////////////////////////////////////////////////////////////////P39/2S3
        pv88pI//PKSP/zykj6EAAAAAAAAAAAAAAAAAAAAAPqaSED6mkuFDqJX/fcO1/8fl3/+Lyr7/X7Wk/3S/
        sP+QzMD/i8q+/3vCtP96wrT/esK0/3rCtP96wrT/esK0/3rCtP96wrT/esK0/3rCtP96wrT/esK0/3rC
        tP9quqr/QaeT/z6mkv8+ppL/PqaSoQAAAAAAAAAAAAAAAAAAAABBqZQQQamU4Uesl/9huKb/Ybim/2G4
        pv9huKb/Ybim/2G4pv9ht6b/UbCd/0GplP9BqZT/QamU/0GplP9BqZT/QamU/0GplP9BqZT/QamU/0Gp
        lP9BqZT/QamU/0GplP9BqZT/QamU/0GplP9BqZShAAAAAAAAAAAAAAAAAAAAAEOrlxBDq5fhSq6b/2O5
        qf9juan/Y7mp/2O5qf9juan/Y7mp/2O5qf9iuaj/TrCd/0Orl/9Dq5f/Q6uX/0Orl/9Dq5f/Q6uX/0Or
        l/9Dq5f/Q6uX/0Orl/9Dq5f/Q6uX/0Orl/9Dq5f/Q6uX/0Orl6EAAAAAAAAAAAAAAAAAAAAARq6ZEEau
        meFPsp7/Zbyq/2W8qv9lvKr/Zbyq/2W8qv9lvKr/Zbyq/2W8qv9ju6n/T7Ke/0aumf9Grpn/Rq6Z/0au
        mf9Grpn/Rq6Z/0aumf9Grpn/Rq6Z/0aumf9Grpn/Rq6Z/0aumf9Grpn/Rq6ZoQAAAAAAAAAAAAAAAAAA
        AABIsJwQSLCc4VK0ov94xLb/qdnQ/37Huf9nva3/gMi6/6fZz/+p2tH/qdrR/6na0f+n2dD/mtTI/5jT
        x/+Y08f/mNPH/5jTx/+Y08f/mNPH/5jTx/+Y08f/mNPH/33HuP9Lsp7/SLCc/0iwnP9IsJyhAAAAAAAA
        AAAAAAAAAAAAAEqznhBKs57hVrik/9Xu6f//////4/Px/3bFtv/o9vP/////////////////////////
        /////////////////////////////////////////////////////////P7+/3HDs/9Ks57/SrOe/0qz
        nqEAAAAAAAAAAAAAAAAAAAAATbWhEE21oeFbuqj/vOPc//j8+//Q6+b/b8Oz/7/k3f/p9vT/6vb0/+r2
        9P/q9vT/6vb0/+r29P/q9vT/6Pbz/+X08v/l9PL/5fTy/+X08v/l9PL/5fTy/+X08v/X7+r/Xryq/021
        of9NtaH/TbWhoQAAAAAAAAAAAAAAAAAAAABPuKQQT7ik4V2+q/9wxbX/gcy9/3PGtv9txLP/bsSz/3LG
        tv9yxrb/csa2/3LGtv9yxrb/csa2/3LGtv9xxrX/X76s/1a7p/9Vu6f/Vbun/1W7p/9Vu6f/Vbun/1K5
        pf9PuKT/T7ik/0+4pP9PuKShAAAAAAAAAAAAAAAAAAAAAFK7phBSu6bhYcGu/2/Gtf9vxrX/b8a1/2/G
        tf9vxrX/b8a1/2/Gtf9vxrX/b8a1/2/Gtf9vxrX/b8a1/2/Gtf9uxrT/Xr+t/1K7pv9Su6b/Urum/1K7
        pv9Su6b/Urum/1K7pv9Su6b/Urum/1K7pqEAAAAAAAAAAAAAAAAAAAAAVL2pEFS9qeFlw7H/cci4/3HI
        uP9xyLj/cci4/3HIuP9xyLj/cci4/3HIuP9xyLj/cci4/3HIuP9xyLj/cci4/3HIuP9wyLf/ZMSx/1W+
        qf9Uvan/VL2p/1S9qf9Uvan/VL2p/1S9qf9Uvan/VL2poQAAAAAAAAAAAAAAAAAAAABWwKsQVsCr4WjH
        tP9yy7n/csu5/3LLuf9yy7n/csu5/3LLuf9yy7n/csu5/3LLuf9yy7n/csu5/3LLuf9yy7n/csu5/3LL
        uf9yy7n/bMi2/1vCrf9WwKv/VsCr/1bAq/9WwKv/VsCr/1bAq/9WwKuhAAAAAAAAAAAAAAAAAAAAAFnC
        rhBZwq7hbcm4/4TRw/+x4tj/itTG/3XMvP+M1Mf/r+HX/7Hi2P+x4tj/seLY/7Hi2P+x4tj/seLY/7Hi
        2P+x4tj/seLY/7Hi2P+x4tj/r+HX/6bd0/+h3NH/idPF/1zDr/9Zwq7/WcKu/1nCrqEAAAAAAAAAAAAA
        AAAAAAAAW8SwEFvEsOFwzLr/2fHs///////m9vP/g9LD/+r39f//////////////////////////////
        ///////////////////////////////////////////////////9/v7/ftHB/1vEsP9bxLD/W8SwoQAA
        AAAAAAAAAAAAAAAAAABdxrIQXcay4XLOvP/D6uL/+P38/9Tw6v980cH/xOvj/+v49v/s+Pb/7Pj2/+z4
        9v/s+Pb/7Pj2/+z49v/s+Pb/7Pj2/+z49v/s+Pb/7Pj2/+z49v/s+Pb/7Pj2/+H08f980cH/Yce0/13G
        sv9dxrKhAAAAAAAAAAAAAAAAAAAAAF/ItBBfyLThacy5/33Swv+M18n/f9PD/3rRwf970cH/f9PD/3/T
        w/9/08P/f9PD/3/Tw/9/08P/f9PD/3/Tw/9/08P/f9PD/3/Tw/9/08P/f9PD/3/Tw/9/08P/fNLC/3rR
        wf950cD/cs69/2bLt6MAAAAAAAAAAAAAAAAAAAAAYcq2EGHKtuFhyrb/ddG//3zTwv9808L/fNPC/3zT
        wv9808L/fNPC/3zTwv9808L/fNPC/3zTwv9808L/fNPC/3zTwv9808L/fNPC/3zTwv9808L/fNPC/3zT
        wv9808L/fNPC/3zTwv9808L/etLBpwAAAAAAAAAAAAAAAAAAAABizLgQYsy44WLMuP9mzbr/e9TD/3zV
        xP981cT/fNXE/3zVxP981cT/fNXE/3zVxP981cT/fNXE/3zVxP981cT/fNXE/3zVxP981cT/fNXE/3zV
        xP981cT/fNXE/3zVxP981cT/fNXE/3zVxP971MOmAAAAAAAAAAAAAAAAAAAAAGTNuQhkzbnSZM25/2TN
        uf9w0b//ftXF/37Vxf9+1cX/ftXF/37Vxf9+1cX/ftXF/37Vxf9+1cX/ftXF/37Vxf9+1cX/ftXF/37V
        xf9+1cX/ftXF/37Vxf9+1cX/ftXF/37Vxf9+1cX/ftXF/nzVxH8AAAAAAAAAAAAAAAAAAAAAAAAAAGXP
        u0dlz7vnZc+7/mbPu/951cP/f9fG/3/Xxv9/18b/f9fG/3/Xxv9/18b/f9fG/3/Xxv9/18b/f9fG/3/X
        xv9/18b/f9fG/3/Xxv9/18b/f9fG/3/Xxv9/18b/f9fG/3/Xxvx+18bIfNbFFgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAGXPuxlm0Lw9ZtC8T2vRvk9918ZTftfHU37Xx1N+18dTftfHU37Xx1N+18dTftfHU37X
        x1N+18dTftfHU37Xx1N+18dTftfHU37Xx1N+18dTftfHU37Xx1N+18dSfNfGMX3WxQ0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////AAAAfgAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAA+AAAAPwAAAH//////////8=
</value>
  </data>
</root>