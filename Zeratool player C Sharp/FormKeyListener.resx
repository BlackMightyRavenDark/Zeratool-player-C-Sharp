<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAHAAAADkAAAA9AAAAPQAAAD0AAAA9AAAAPQAA
        AD0AAAA9AAAAPQAAAD0AAAA9AAAAPQAAAD0AAAA9AAAAPQAAAD0AAAA9AAAAPQAAAD0AAAA9AAAAPQAA
        AD0AAAA9AAAAPQAAAD0AAAA9AAAAPQAAADkAAAAcAAAAAgAAAEoAAADOAAAA4wAAAOAAAADgAAAA4AAA
        AOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4AAA
        AOAAAADgAAAA4AAAAOAAAADgAAAA4AAAAOAAAADgAAAA4wAAAM4AAABKAAAA0gAAALIAAAA/AAAAMgAA
        ADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAAAMgAA
        ADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAAAyAAAAMgAAADIAAAA/AAAAsgAAANIAAAD6AAAAWgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABaAAAA+gAA
        APoAAABVAAAABQAAAEoAAABiAAAASgAAABEAAABVAAAAYgAAADwAAAAUAAAAWwAAAGIAAABiAAAAYgAA
        AGIAAABiAAAAYgAAAGIAAABiAAAAWwAAABQAAAA8AAAAYgAAAFUAAAARAAAASgAAAGIAAABKAAAABQAA
        AFUAAAD6AAAA+gAAAFUAAAANAAAAwAAAAP0AAADAAAAALQAAAN0AAAD9AAAAnAAAADQAAADrAAAA/QAA
        AP0AAAD9AAAA/QAAAP0AAAD9AAAA/QAAAP0AAADrAAAANAAAAJwAAAD9AAAA3QAAAC0AAADAAAAA/QAA
        AMAAAAANAAAAVQAAAPoAAAD6AAAAVQAAAA0AAAC8AAAA9wAAALwAAAAsAAAA2AAAAPcAAACYAAAAMgAA
        AOYAAAD3AAAA9wAAAPcAAAD3AAAA9wAAAPcAAAD3AAAA9wAAAOYAAAAyAAAAmAAAAPcAAADYAAAALAAA
        ALwAAAD3AAAAvAAAAA0AAABVAAAA+gAAAPoAAABVAAAABAAAADcAAABIAAAANwAAAA0AAAA/AAAASAAA
        ACwAAAAPAAAAQwAAAEgAAABIAAAASAAAAEgAAABIAAAASAAAAEgAAABIAAAAQwAAAA8AAAAsAAAASAAA
        AD8AAAANAAAANwAAAEgAAAA3AAAABAAAAFUAAAD6AAAA+gAAAFUAAAAHAAAAYQAAAIAAAACAAAAAgAAA
        AFUAAAAXAAAAcwAAAIAAAABHAAAAJQAAAHwAAAB/AAAAMQAAADEAAAB/AAAAfAAAACUAAABHAAAAgAAA
        AHMAAAAXAAAAVQAAAIAAAACAAAAAgAAAAGEAAAAHAAAAVQAAAPoAAAD6AAAAVQAAAA0AAADCAAAA/wAA
        AP8AAAD/AAAAqgAAAC4AAADmAAAA/wAAAI4AAABJAAAA9wAAAP0AAABiAAAAYgAAAP0AAAD3AAAASQAA
        AI4AAAD/AAAA5gAAAC4AAACqAAAA/wAAAP8AAAD/AAAAwgAAAA0AAABVAAAA+gAAAPoAAABVAAAADAAA
        ALQAAADtAAAA7QAAAO0AAACeAAAAKwAAANYAAADtAAAAhAAAAEQAAADmAAAA6wAAAFsAAABbAAAA6wAA
        AOYAAABEAAAAhAAAAO0AAADWAAAAKwAAAJ4AAADtAAAA7QAAAO0AAAC0AAAADAAAAFUAAAD6AAAA+gAA
        AFUAAAADAAAAKgAAADcAAAA2AAAAMwAAACYAAAAOAAAAMAAAADMAAAAgAAAAEwAAADMAAAAzAAAAGAAA
        ABgAAAAzAAAAMwAAABMAAAAgAAAAMwAAADAAAAAOAAAAJgAAADMAAAA2AAAANwAAACoAAAADAAAAVQAA
        APoAAAD6AAAAVQAAAAkAAACCAAAAqgAAAIIAAAAeAAAAlQAAAKoAAABpAAAAIwAAAJ4AAACqAAAAVgAA
        ADkAAACnAAAApwAAADkAAABWAAAAqgAAAJ4AAAAjAAAAaQAAAKoAAACVAAAAHgAAAIIAAACqAAAAggAA
        AAkAAABVAAAA+gAAAPoAAABVAAAADQAAAMIAAAD/AAAAwgAAAC0AAADfAAAA/wAAAJ0AAAA0AAAA7QAA
        AP8AAACAAAAAVQAAAPoAAAD6AAAAVQAAAIAAAAD/AAAA7QAAADQAAACdAAAA/wAAAN8AAAAtAAAAwgAA
        AP8AAADCAAAADQAAAFUAAAD6AAAA+gAAAFUAAAALAAAAowAAANYAAACjAAAAJgAAALsAAADWAAAAhAAA
        ACwAAADHAAAA1gAAAGwAAABHAAAA0gAAANIAAABHAAAAbAAAANYAAADHAAAALAAAAIQAAADWAAAAuwAA
        ACYAAACjAAAA1gAAAKMAAAALAAAAVQAAAPoAAAD6AAAAVQAAAAEAAAATAAAAGQAAABMAAAAEAAAAFgAA
        ABkAAAAPAAAABQAAABcAAAAZAAAADQAAAAgAAAAYAAAAGAAAAAgAAAANAAAAGQAAABcAAAAFAAAADwAA
        ABkAAAAWAAAABAAAABMAAAAZAAAAEwAAAAEAAABVAAAA+gAAAPUAAABwAAAAAwAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAQAA
        AAEAAAABAAAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAwAAAHAAAAD1AAAAowAAAN4AAACYAAAAjgAA
        AI4AAACOAAAAjgAAAI4AAACOAAAAjgAAAI4AAACOAAAAjgAAAI4AAACOAAAAjgAAAI4AAACOAAAAjgAA
        AI4AAACOAAAAjgAAAI4AAACOAAAAjgAAAI4AAACOAAAAjgAAAI4AAACYAAAA3gAAAKMAAAAbAAAAhQAA
        ALwAAADCAAAAwgAAAMIAAADCAAAAwgAAAMIAAADCAAAAwgAAAMIAAADCAAAAwgAAAMMAAADmAAAA7wAA
        AMQAAADCAAAAwgAAAMIAAADCAAAAwgAAAMIAAADCAAAAwgAAAMIAAADCAAAAwgAAALwAAACFAAAAGwAA
        AAAAAAACAAAACgAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAA
        AIYAAADQAAAAIQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAACgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAARQAAAOYAAABhAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAALAAAAmAAAAOMAAACaAAAAYAAAAD8AAAAjAAAACQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAbwAAAL4AAADcAAAA4wAAANwAAACpAAAANwAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAADQAAACIAAAA5AAAAZQAA
        AMQAAADRAAAAKwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAKAAAANMAAACHAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAAkwAAAL8AAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABuAAAAyAAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAA0AAAABgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////AAAAAAAAAAAAAAAAP////AAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAH//h////4B////
        AH///4B////8P////D////4////+P/////8=
</value>
  </data>
</root>